name: CI/CD for Main Branch

on:
  pull_request:
    branches:
      - main
      - canary
  push:
    branches:
      - main
      - canary

permissions:
  contents: write
  pages: write
  id-token: write

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: false

      - name: Get Branch Names and Target Branch
        run: |
          echo "CLIENT_BRANCH=${{ github.head_ref }}" >> $GITHUB_ENV
          echo "TARGET_BRANCH=${{ github.base_ref }}" >> $GITHUB_ENV

          # Extract Server Branch Name from PR description
          SERVER_BRANCH=$(echo "${{ github.event.pull_request.body }}" | grep -oP '(?<=Server branch: )[^ ]+' || echo "default-branch")

          echo "Extracted SERVER_BRANCH: $SERVER_BRANCH"  # Debugging output
          echo "SERVER_BRANCH=${SERVER_BRANCH:-$CLIENT_BRANCH}" >> $GITHUB_ENV

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AUTOTEST_ACTIONS }}" | sed 's/\\n/\n/g' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p 2222 89.23.4.133 >> ~/.ssh/known_hosts
          
      - name: Client Connect to server and perform Git operations
        run: |
          # Attempt SSH connection with debugging enabled
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -p 2222 npo@89.23.4.133 \
          "TARGET_BRANCH=${TARGET_BRANCH} CLIENT_BRANCH=${CLIENT_BRANCH} bash -c ' 
          set -x  
          echo \"‚úÖ TARGET_BRANCH is: $TARGET_BRANCH\"
          echo \"‚úÖ CLIENT_BRANCH is: $CLIENT_BRANCH\"
          
          cd ~/autodeploy-test || { echo \"‚ùå Failed to change directory\"; exit 1; }

          # **Remove existing repository completely**
          echo "‚ö†Ô∏è Removing existing repository..."
          rm -rf sep_erp_client || { echo "‚ùå Failed to remove old repo"; exit 1; }

          # **Clone a fresh copy of TARGET_BRANCH**
          echo "‚ö†Ô∏è Cloning fresh repository..."
          git clone --branch ${TARGET_BRANCH} git@github.com:NPO-Automotive/sep_erp_client.git || { echo "‚ùå Failed to clone repository"; exit 1; }
          cd sep_erp_client || { echo "‚ùå Failed to enter project directory"; exit 1; }
      
          # Fetch all branches
          git fetch --all || { echo "Failed to fetch branches"; exit 1; }

          # Switch to main/canary branch
          git checkout ${TARGET_BRANCH} || { echo "Failed to checkout ${TARGET_BRANCH}"; exit 1; }

          # Switch to CLIENT_BRANCH or create from remote
          if git checkout ${CLIENT_BRANCH}; then
            echo "Switched to existing branch '${CLIENT_BRANCH}'."
          else
            echo "'${CLIENT_BRANCH}' does not exist locally. Creating from remote."
            git checkout -b ${CLIENT_BRANCH} origin/${CLIENT_BRANCH} || { echo "Failed to create branch ${CLIENT_BRANCH}"; exit 1; }
          fi

          # Pull latest changes into CLIENT_BRANCH
          git pull origin ${CLIENT_BRANCH} || { echo "Failed to pull ${CLIENT_BRANCH}"; exit 1; }

          # Switch back to TARGET_BRANCH
          git checkout ${TARGET_BRANCH} || { echo "Failed to checkout ${TARGET_BRANCH}"; exit 1; }

          # Set Git User
          git config --global user.email "rgjoyce111@gmail.com"
          git config --global user.name "atomant1969"

          # Merge CLIENT_BRANCH into TARGET_BRANCH without committing
          git merge ${CLIENT_BRANCH} --no-commit || { echo "Failed to merge ${CLIENT_BRANCH} into ${TARGET_BRANCH}"; exit 1; }

          # Check pnpm installation
          echo "Checking pnpm version:"
          pnpm --version

          # Build site
          pnpm i || { echo "Failed to install dependencies"; exit 1; }
          pnpm run build || { echo "Failed to build site"; exit 1; }
          rsync -av build/ dist/ || { echo "Failed to sync build to dist"; exit 1; }
          '"

      - name: Server Connect and Perform Git Operations
        run: |
          # Attempt SSH connection with debugging enabled
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -p 2222 npo@89.23.4.133 \
          "TARGET_BRANCH=${TARGET_BRANCH} SERVER_BRANCH=${SERVER_BRANCH} bash -c ' 
          set -x  
          echo \"‚úÖ TARGET_BRANCH is: $TARGET_BRANCH\"
          echo \"‚úÖ SERVER_BRANCH is: $SERVER_BRANCH\"
          
          docker cp /home/npo/.ssh/id_rsa sep-erp-test_app_test_1:/home/node/.ssh/id_rsa
          docker cp /home/npo/.ssh/id_rsa.pub sep-erp-test_app_test_1:/home/node/.ssh/id_rsa.pub

          docker exec -e TARGET_BRANCH=\"$TARGET_BRANCH\" -e SERVER_BRANCH=\"$SERVER_BRANCH\" sep-erp-test_app_test_1 bash -c \"set -e;
          
          apt-get update && apt-get install -y openssh-client
          whoami
          mkdir -p /home/node/.ssh
          chmod 600 /home/node/.ssh/id_rsa
          chmod 644 /home/node/.ssh/id_rsa.pub

          # Add GitHub to known hosts
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          echo \\\"‚úÖ SSH Key Setup Complete Inside Docker!\\\";
         
          echo \\\"üìå [START] Fetching branches for SERVER_BRANCH: \$SERVER_BRANCH on TARGET_BRANCH: \$TARGET_BRANCH\\\";

          echo \\\"üîπ TARGET_BRANCH is: \$TARGET_BRANCH\\\";
          echo \\\"üîπ SERVER_BRANCH is: \$SERVER_BRANCH\\\";

          # install git if it is missing
          apt update && apt install -y git

          git fetch --all || { echo \\\"‚ùå Failed to fetch branches\\\"; exit 1; }
          git reset --hard origin/\$TARGET_BRANCH || { echo \\\"‚ùå Failed to reset TARGET_BRANCH\\\"; exit 1; }
          git switch \$TARGET_BRANCH || { echo \\\"‚ùå Failed to switch to TARGET_BRANCH\\\"; exit 1; }

          if [ \"\\$SERVER_BRANCH\" != \"default-branch\" ]; then
            # Ensure the local SERVER_BRANCH is deleted before pulling from remote
            if git show-ref --verify --quiet refs/heads/\$SERVER_BRANCH; then
              git branch -D \$SERVER_BRANCH || echo \\\"‚úÖ No existing local branch \$SERVER_BRANCH, skipping deletion.\\\"
            else
              echo \\\"‚úÖ No existing local branch \$SERVER_BRANCH, skipping deletion.\\\"
            fi

            git pull origin \$TARGET_BRANCH || { echo \\\"‚ùå Failed to pull TARGET_BRANCH\\\"; exit 1; }

            # Force reset instead of pull to avoid fast-forward issues
            git fetch origin \$SERVER_BRANCH || { echo \\\"‚ùå Failed to fetch SERVER_BRANCH\\\"; exit 1; }
            git reset --hard origin/\$SERVER_BRANCH || { echo \\\"‚ùå Failed to reset SERVER_BRANCH\\\"; exit 1; }
            
            # ‚úÖ **Merge SERVER_BRANCH into TARGET_BRANCH**
            git checkout \\$TARGET_BRANCH || { echo \\\"‚ùå Failed to switch back to TARGET_BRANCH\\\"; exit 1; }
            git pull
            git merge --no-commit --no-ff origin/\\$SERVER_BRANCH || { echo \\\"‚ùå Failed to merge SERVER_BRANCH into TARGET_BRANCH\\\"; exit 1; }
          fi
          # Install TypeScript globally
          #npm install -g typescript
          
          # Install dependencies before building
          #pnpm add sequelize @types/sequelize --filter ./packages/zod-shared || { echo \\\"‚ùå Failed to install dependencies\\\"; exit 1; }

          # Verify TypeScript availability
          #tsc -v || { echo \\\"‚ùå TypeScript is still missing!\\\"; exit 1; }
          
          pnpm i || { echo \\\"‚ùå Failed to install dependencies\\\"; exit 1; }
          pnpm run build:lib || { echo \\\"‚ùå Failed to build site libraries\\\"; exit 1; }
          pnpm run build || { echo \\\"‚ùå Failed to build site\\\"; exit 1; }
          
          echo \\\"üìå [COMPLETE] Server operations finished successfully!\\\";
          \" ' || { echo \"‚ùå Docker exec command failed\"; exit 1; }


          echo \\\"üîÑ Restarting Docker container...\\\"
          docker restart sep-erp-test_app_test_1 2>&1 | tee /tmp/docker_restart.log || { echo \"‚ùå Failed to restart Docker container\"; cat /tmp/docker_restart.log; exit 1; }
          "


      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.13.1'
          cache: 'npm'

      - name: Cache Playwright browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            playwright-${{ runner.os }}-
            playwright-

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright dependencies
        run: sudo npx playwright install-deps

      - name: Install Playwright browsers
        run: npx playwright install
        
      
      - name: Run Playwright tests with xvfb
        env:
          TEST_DIR: '.'
          BASE_URL: 'http://test.pksep.ru/'
        run: xvfb-run --auto-servernum --server-args="-screen 0 1920x1080x24" npm run test

      - uses: actions/upload-artifact@master
        with:
          name: allure-results
          path: allure-results
          retention-days: 20
        
      - name: Get Allure history
        uses: actions/checkout@v2
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages
    
      - name: Test marketplace action
        uses: simple-elf/allure-report-action@master
        if: always()
        id: allure-report
        with:
          allure_results: allure-results
          gh_pages: gh-pages
          allure_report: allure-report
          allure_history: allure-history
          keep_reports: 2

      - name: Deploy report to Github Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v2
        env:
          PERSONAL_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLISH_BRANCH: gh-pages
          PUBLISH_DIR: allure-history
